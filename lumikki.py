east1: str = """
201013223304041130232114313033004024000
032041220001422242122220110003201341113
310221044000200104040144142033022034241
231313130031132120142231331441341441211
014003212114130041110100241241004031001
040331432341122101010040120412442442402
13331220330103113111211210322314
1310424224130304110203123204313
""".strip()

east2: str = """
121013223304041130232114313033004024004
132041220001422242122220110003201341132
302013230044210143001214140311024104223
102441113222231403330130231010322441422
014113030144102020311114241034232132112
141120120040103022122402040000103221040
001132210042231043242013103010200300221
020142240312031330231000103310441201422
034201043101100200124
131402022020141322311
""".strip()

east3: str = """
221014304000100302220231222232144144211
332041002222431341003242000010220042431
313223312120134004141302310001231043130
020020140002021212311100003112220110032
140214222023042001214241211223104010034
003021031300212210310000312332003240422
001240241020232043043031224131312301142
232311130211021020222341412113240321230
001030124221224033003211024213133231001
410210103300432031412111422330403400041
04124012304
0423010104
""".strip()

east4: str = """
101014304000100000010213233120142133003
232041002222431212430430300110203421130
101004223210034300144214224022200300022
303411022313202403302030222441142010141
143234300120242230110301302001040030130
012332401341341302441301412412222303322
212222143130302013102113102230003103232
432331411032403200122103112431440120231
12202423010131123221303
3421210220100323034034
""".strip()

east5: str = """
111014304000100000010213233120143044133
332041002222431212430430300110211112430
101214223302024014144212222230212213233
303411022401202041302002242420240341202
014110114103111010240110204010013100130
211211130110441211112403410122040041213
102041041221134130133013243011042010221
020203002240010120442311042111142031102
131224220222041
232442101331431
""".strip()

west1: str = """
311013223304041130232114313033004024004
032041220001422242122220110003201341101
020201044000104044040144142033022034131
111213130001102020142231331441341441401
212223303244000243231110221231031022043
403431401222111340210301413341221330132
02414221422203024200123212402323201403
3101322112130203222200422310313224113
""".strip()

west2: str = """
301014304231111130103200114211142042144
132041002441200222141013240022220120402
110120210044012022014100202130013243312
401130112010322313431422313213031100003
143110223024224201021223142200103111223
203401230041222213132220230242140211440
122201000012143101233312010224203221
011010101321231103032030241320322030
""".strip()

west3: str = """
111014304044023101033232120113240032023
432041002342120301441212222401420211130
033031134224144111303003142234042131112
431413200210141202112431230203111430021
103133214200230011143034143033110122120
101132211120442310131321231020311022200
120120123130011024014133021023002220044
210312220001440122003232142141332131220
120224022234203033120244040200
002121100141102242103402411442
""".strip()

west4: str = """
301014304000100000010213233120140040002
232041002222431212430430300110222113142
211310214001032122241124300100131223313
030221230132301430413420300032332421140
040210240103202210243021012103012033232
402211103132412102142440311122021431141
204233241203302023301041204241012232101
311140311421232122410240132440030221440
224314114042121114140130
020231000031000102140011
""".strip()


codes: list = [east1, west1, east2, west2, east3, west3, east4, west4, east5]

for i in range(len(codes)):
    codes[i]: str = codes[i].replace("0", "•").replace("1", "↑")\
    .replace("2", "→").replace("3", "↓").replace("4", "←")
    print(codes[i])


class Orientation:
    def __init__(self, order: list = ["lrb", "rlt"]):
        self.l1: list = [0, 0, -2]
        self.r1: list = [0, 1, -1]
        self.b1: list = [1, 0, -1]

        self.r2: list = [1, 2, -1]
        self.l2: list = [1, 1, -2]
        self.t2: list = [0, 2, -1]

        self.order: list = order

        self.set_order(order)

    def set_order(self, order: list = ["lrb", "rlt"]):
        a1: str = order[0][0]
        a2: str = order[0][1]
        a3: str = order[0][2]

        a4: str = order[1][0]
        a5: str = order[1][1]
        a6: str = order[1][2]

        self.list_order = [
            getattr(self, f"{a1}1"), getattr(self, f"{a2}1"), getattr(self, f"{a3}1"),
            getattr(self, f"{a4}2"), getattr(self, f"{a5}2"), getattr(self, f"{a6}2")
        ]

        return self.list_order

    def get_list(self):
        return self.list_order


def set_symbols(data: str, order: str = "01234") -> str:
    return data.replace("•", order[0]).replace("↑", order[1])\
    .replace("→", order[2]).replace("↓", order[3]).replace("←", order[4])


def to_list(data: str) -> list:
    data_list: list = data.split("\n")

    for i in range(len(data_list)):
        data_list[i]: list = [int(nb) for nb in data_list[i]]

    return data_list


def encode_data(data: list, base: int = 5, mode: str = ["lrb", "rlt"]) -> list:
    encoded: list = []

    d: Orientation = Orientation(mode)
    d: list = d.get_list()

    for i in range(0, len(data), 2):
        for n in range(0, len(data[i])-2, 3):
            d1: int = data[i+d[0][0]][n+d[0][1]]
            d2: int = data[i+d[1][0]][n+d[1][1]]
            d3: int = data[i+d[2][0]][n+d[2][1]]

            encoded.append([d1, d2, d3])

            d4: int = data[i+d[3][0]][n+d[3][1]]
            d5: int = data[i+d[4][0]][n+d[4][1]]
            d6: int = data[i+d[5][0]][n+d[5][1]]

            encoded.append([d4, d5, d6])

        if len(data[i]) % 3:
            d1: int = data[i+d[0][0]][d[0][2]]
            d2: int = data[i+d[1][0]][d[1][2]]
            d3: int = data[i+d[2][0]][d[2][2]]

            encoded.append([d1, d2, d3])

    for i in range(len(encoded)):
        encoded[i]: int = int(f"{encoded[i][0]}{encoded[i][1]}{encoded[i][2]}", base)

    return encoded


def format_data(data: list, offset: int = 32) -> str:
    if offset != "no":
        data: list = [chr(o+offset) for o in data]

    text: str = ""

    for e in data:
        text += str(e)

        if offset == "no":
            text += " "

    return text
