east1: str = """
201013223304041130232114313033004024000
032041220001422242122220110003201341113
310221044000200104040144142033022034241
231313130031132120142231331441341441211
014003212114130041110100241241004031001
040331432341122101010040120412442442402
13331220330103113111211210322314
1310424224130304110203123204313
""".strip()

east2: str = """
121013223304041130232114313033004024004
132041220001422242122220110003201341132
302013230044210143001214140311024104223
102441113222231403330130231010322441422
014113030144102020311114241034232132112
141120120040103022122402040000103221040
001132210042231043242013103010200300221
020142240312031330231000103310441201422
034201043101100200124
131402022020141322311
""".strip()

east3: str = """
221014304000100302220231222232144144211
332041002222431341003242000010220042431
313223312120134004141302310001231043130
020020140002021212311100003112220110032
140214222023042001214241211223104010034
003021031300212210310000312332003240422
001240241020232043043031224131312301142
232311130211021020222341412113240321230
001030124221224033003211024213133231001
410210103300432031412111422330403400041
04124012304
0423010104
""".strip()

east4: str = """
101014304000100000010213233120142133003
232041002222431212430430300110203421130
101004223210034300144214224022200300022
303411022313202403302030222441142010141
143234300120242230110301302001040030130
012332401341341302441301412412222303322
212222143130302013102113102230003103232
432331411032403200122103112431440120231
12202423010131123221303
3421210220100323034034
""".strip()

east5: str = """
111014304000100000010213233120143044133
332041002222431212430430300110211112430
101214223302024014144212222230212213233
303411022401202041302002242420240341202
014110114103111010240110204010013100130
211211130110441211112403410122040041213
102041041221134130133013243011042010221
020203002240010120442311042111142031102
131224220222041
232442101331431
""".strip()

west1: str = """
311013223304041130232114313033004024004
032041220001422242122220110003201341101
020201044000104044040144142033022034131
111213130001102020142231331441341441401
212223303244000243231110221231031022043
403431401222111340210301413341221330132
02414221422203024200123212402323201403
3101322112130203222200422310313224113
""".strip()

west2: str = """
301014304231111130103200114211142042144
132041002441200222141013240022220120402
110120210044012022014100202130013243312
401130112010322313431422313213031100003
143110223024224201021223142200103111223
203401230041222213132220230242140211440
122201000012143101233312010224203221
011010101321231103032030241320322030
""".strip()

west3: str = """
111014304044023101033232120113240032023
432041002342120301441212222401420211130
033031134224144111303003142234042131112
431413200210141202112431230203111430021
103133214200230011143034143033110122120
101132211120442310131321231020311022200
120120123130011024014133021023002220044
210312220001440122003232142141332131220
120224022234203033120244040200
002121100141102242103402411442
""".strip()

west4: str = """
301014304000100000010213233120140040002
232041002222431212430430300110222113142
211310214001032122241124300100131223313
030221230132301430413420300032332421140
040210240103202210243021012103012033232
402211103132412102142440311122021431141
204233241203302023301041204241012232101
311140311421232122410240132440030221440
224314114042121114140130
020231000031000102140011
""".strip()


codes: list = [east1, west1, east2, west2, east3, west3, east4, west4, east5]

for i in range(len(codes)):
    codes[i]: str = codes[i].replace("0", "•").replace("1", "↑")\
    .replace("2", "→").replace("3", "↓").replace("4", "←")


class Orientation:
    def __init__(self, order: list = ["lrb", "rlt"]):
        self.l1: list = [0, 0, -2]
        self.r1: list = [0, 1, -1]
        self.b1: list = [1, 0, -1]

        self.r2: list = [1, 2, -1]
        self.l2: list = [1, 1, -2]
        self.t2: list = [0, 2, -1]

        self.order: list = order

        self.set_order(order)

    def set_order(self, order: list = ["lrb", "rlt"]):
        a1: str = order[0][0]
        a2: str = order[0][1]
        a3: str = order[0][2]

        a4: str = order[1][0]
        a5: str = order[1][1]
        a6: str = order[1][2]

        self.list_order = [
            getattr(self, f"{a1}1"), getattr(self, f"{a2}1"), getattr(self, f"{a3}1"),
            getattr(self, f"{a4}2"), getattr(self, f"{a5}2"), getattr(self, f"{a6}2")
        ]

        return self.list_order

    def get_list(self):
        return self.list_order


def set_symbols(data: str, order: str = "01234"):
    return data.replace("•", order[0]).replace("↑", order[1])\
    .replace("→", order[2]).replace("↓", order[3]).replace("←", order[4])

# lumikki

def to_list(data: str) ->list:
    data_list: list = data.split("\n")

    for i in range(len(data_list)):
        data_list[i]: list = [int(nb) for nb in data_list[i]]

    return data_list


def encode_data(data: list, base: int = 5, mode: str = ["lrb", "rlt"]) -> list:
    encoded: list = []

    d: Orientation = Orientation(mode)
    d: list = d.get_list()

    for i in range(0, len(data), 2):
        for n in range(0, len(data[i])-2, 3):
            d1: int = data[i+d[0][0]][n+d[0][1]]
            d2: int = data[i+d[1][0]][n+d[1][1]]
            d3: int = data[i+d[2][0]][n+d[2][1]]

            encoded.append([d1, d2, d3])

            d4: int = data[i+d[3][0]][n+d[3][1]]
            d5: int = data[i+d[4][0]][n+d[4][1]]
            d6: int = data[i+d[5][0]][n+d[5][1]]

            encoded.append([d4, d5, d6])

        if len(data[i]) % 3:
            d1: int = data[i+d[0][0]][d[0][2]]
            d2: int = data[i+d[1][0]][d[1][2]]
            d3: int = data[i+d[2][0]][d[2][2]]

            encoded.append([d1, d2, d3])

    for i in range(len(encoded)):
        encoded[i]: int = int(f"{encoded[i][0]}{encoded[i][1]}{encoded[i][2]}", base)

    return encoded


def format_data(data: list, offset: int = 32) -> str:
    if offset != "no":
        data: list = [chr(o+offset) for o in data]

    n: str = ""

    for e in data:
        n += str(e)

        if offset == "no":
            n += " "

    return n

"""
data: list = []

# lrb | rlb | blr | brl | rbl | lbr -> first 3
# lrt | rlt | trl | tlr | rtl | ltr -> second 3

for code in codes:
    # left right bottom | right left top
    data.append(format_data(encode_data(data=to_list(code), base=5, mode=["lrb", "rlt"]), offset=32))

for elem in data:
    print(elem)
"""

# original
"""
data = {
    "east1": (50, 66, 5, 48, 62, 13, 75, 29, 24, 61, 42, 70, 66, 62, 32, 14, 81, 8,  15, 78, 2,  29, 13, 49, 1,  80, 82, 40, 63, 81, 21, 19, 0, 40, 51, 65, 26, 14, 21, 70, 47, 44, 48, 42, 19, 48, 13, 47, 19, 49, 72, 31, 5, 24, 3, 43, 59, 67, 33, 49, 41, 60, 21, 26, 30, 5, 25, 20, 71, 11, 74, 56, 4, 74, 19, 71, 4, 51, 41, 43, 80, 72, 54, 63, 79, 81, 15, 16, 44, 31, 30, 12, 33, 57, 28, 13, 64, 43, 48),
    "west1": (80, 66, 5, 48, 62, 13, 75, 29, 24, 61, 42, 70, 66, 62, 32, 14, 81, 8,  15, 78, 2,  29, 13, 49, 1,  29, 11, 30, 52, 81, 21, 19, 0, 25, 26, 54, 20, 14, 21, 70, 47, 44, 48, 42, 19, 48, 13, 47, 19, 49, 44, 26, 59, 77, 64, 43, 79, 28, 72, 64, 1, 30, 73, 23, 67, 6, 33, 25, 64, 81, 68, 46, 17, 36, 13, 17, 21, 68, 13, 9, 46, 67, 57, 34, 62, 82, 15, 10, 73, 62, 2, 11, 65, 72, 37, 44, 10, 43, 68, 62, 9, 34, 18),
    "east2": (36, 66, 5, 48, 62, 13, 75, 29, 24, 61, 42, 70, 66, 62, 32, 14, 81, 8,  15, 78, 2,  29, 13, 49, 1,  69, 76, 52, 9,  48, 66, 80, 22, 64, 57, 40, 49, 78, 3, 16, 56, 19, 47, 40, 80, 6, 13, 64, 29, 49, 64, 63, 6, 49, 31, 13, 16, 10, 45, 24, 26, 77, 10, 60, 81, 61, 34, 54, 70, 21, 15, 4, 66, 77, 42, 37, 30, 22, 0, 11, 41, 72, 57, 20, 23, 57, 65, 41, 23, 18, 72, 42, 5, 3, 26, 78, 8, 5, 54, 45, 77, 25, 64, 61, 16, 44, 54, 51, 20, 63, 25, 11, 26, 45, 53, 60, 38, 34),
    "west2": (76, 66, 5, 49, 75, 54, 69, 46, 32, 1,  42, 60, 26, 48, 50, 80, 32, 24, 55, 61, 47, 12, 21, 12, 49, 54, 34, 25, 36, 15, 56, 55, 20, 9, 8, 62, 13, 82, 9, 44, 29, 60, 53, 82, 42, 80, 5, 43, 71, 3, 80, 77, 47, 78, 34, 25, 62, 18, 10, 49, 62, 64, 52, 81, 11, 66, 62, 13, 47, 17, 52, 70, 26, 23, 32, 31, 64, 23, 35, 32, 50, 6, 1, 25, 8, 37, 47, 43, 26, 76, 65, 68, 80, 17, 7, 45, 63, 14, 53, 63, 60, 16),
    "east3": (63, 66, 5, 49, 75, 54, 2,  60, 29, 40, 78, 47, 60, 75, 67, 71, 60, 2,  65, 7,  47, 14, 45, 74, 59, 41, 80, 13, 60, 13, 81, 22, 35, 50, 40, 39, 2, 59, 48, 31, 76, 2, 80, 75, 1, 56, 67, 11, 21, 8, 40, 65, 45, 75, 55, 39, 60, 42, 13, 3, 22, 57, 2, 6, 58, 9, 70, 1, 58, 56, 63, 68, 25, 79, 7, 20, 19, 64, 2, 66, 73, 30, 71, 16, 12, 30, 65, 37, 20, 13, 22, 63, 18, 46, 64, 59, 41, 81, 82, 22, 78, 36, 47, 17, 4, 6, 17, 5, 36, 79, 63, 1, 64, 69, 15, 43, 4, 58, 56, 31, 14, 64, 58, 18, 44, 78, 69, 1, 0, 46, 20, 71, 73, 25, 35, 8, 24),
    "west3": (34, 66, 5, 49, 75, 54, 23, 74, 11, 13, 28, 26, 19, 48, 67, 57, 37, 60, 34, 28, 74, 10, 17, 32, 11, 18, 19, 43, 19, 81, 42, 4, 62, 9, 46, 49, 32, 51, 76, 58, 4, 43, 47, 17, 67, 79, 21, 32, 44, 16, 30, 37, 26, 28, 41, 68, 57, 34, 51, 10, 69, 70, 8, 6, 46, 43, 18, 39, 47, 43, 15, 13, 33, 30, 35, 62, 37, 0, 37, 5, 38, 55, 37, 13, 40, 25, 9, 21, 11, 64, 5, 79, 42, 68, 11, 71, 11, 48, 3, 67, 61, 40, 22, 14, 35, 50, 61, 39, 11, 2, 66, 49, 51, 53, 17, 73, 36, 75, 74, 54, 24, 30, 54, 70),
    "east4": (27, 66, 5, 49, 75, 54, 2,  60, 29, 40, 2,  55, 9,  15, 59, 18, 68, 3,  36, 5,  47, 77, 44, 38, 1,  18, 28, 76, 4,  34, 60, 63, 58, 80, 17, 54, 79, 75, 48, 54, 55, 19, 62, 64, 14, 47, 51, 70, 75, 5, 11, 47, 45, 58, 68, 69, 79, 25, 38, 45, 73, 47, 68, 50, 34, 45, 78, 26, 79, 57, 4, 56, 22, 60, 18, 75, 43, 60, 59, 67, 63, 42, 49, 33, 40, 65, 79, 77, 7, 3, 26, 62, 31, 78, 26, 57, 69, 40, 4, 23, 26, 13, 67, 42, 38, 72, 11, 39, 65, 60, 25, 6, 80, 66, 68, 77, 59, 78, 19),
    "west4": (77, 66, 5, 49, 75, 54, 2,  60, 29, 40, 2,  55, 9,  15, 59, 18, 68, 3,  36, 5,  47, 60, 21, 80, 1,  72, 55, 16, 82, 35, 57, 19, 1, 66, 18, 27, 39, 17, 74, 81, 39, 14, 78, 0, 25, 65, 43, 66, 64, 38, 81, 23, 24, 50, 57, 30, 71, 75, 26, 68, 54, 57, 56, 50, 71, 73, 14, 21, 8, 32, 26, 63, 5, 37, 19, 43, 66, 47, 53, 34, 66, 23, 73, 31, 54, 38, 77, 67, 11, 63, 79, 6, 22, 21, 51, 69, 74, 21, 5, 17, 67, 37, 29, 21, 60, 14, 82, 44, 30, 4, 20, 42, 35, 1, 31, 54, 46, 20, 40, 30),
    "east5": (33, 66, 5, 49, 75, 54, 2,  60, 29, 40, 2,  55, 9,  15, 59, 18, 68, 3,  36, 5,  47, 33, 21, 59, 44, 18, 28, 76, 59, 34, 60, 63, 79, 27, 12, 54, 5, 49, 48, 54, 55, 52, 62, 72, 69, 10, 57, 22, 58, 48, 67, 53, 7, 34, 32, 30, 31, 19, 26, 8, 34, 46, 7, 30, 71, 55, 34, 75, 54, 9, 6, 60, 5, 23, 25, 45, 42, 80, 25, 12, 22, 76, 20, 51, 62, 21, 40, 9, 41, 10, 44, 73, 8, 33, 70, 73, 6, 31, 21, 72, 5, 40, 61, 51, 42, 66, 64, 74, 61, 25, 63, 42, 24, 41)
}
"""
