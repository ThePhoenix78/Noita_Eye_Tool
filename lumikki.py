east1: str = """
→•↑•↑↓→→↓↓•←•←↑↑↓•→↓→↑↑←↓↑↓•↓↓••←•→←•••
•↓→•←↑→→•••↑←→→→←→↑→→→→•↑↑•••↓→•↑↓←↑↑↑↓
↓↑•→→↑•←←•••→••↑•←•←•↑←←↑←→•↓↓•→→•↓←→←↑
→↓↑↓↑↓↑↓••↓↑↑↓→↑→•↑←→→↓↑↓↓↑←←↑↓←↑←←↑→↑↑
•↑←••↓→↑→↑↑←↑↓••←↑↑↑•↑••→←↑→←↑••←•↓↑••↑
•←•↓↓↑←↓→↓←↑↑→→↑•↑•↑••←•↑→•←↑→←←→←←→←•→
↑↓↓↓↑→→•↓↓•↑•↓↑↑↓↑↑↑→↑↑→↑•↓→→↓↑←
↑↓↑•←→←→→←↑↓•↓•←↑↑•→•↓↑→↓→•←↓↑↓
""".strip()

west1: str = """
↓↑↑•↑↓→→↓↓•←•←↑↑↓•→↓→↑↑←↓↑↓•↓↓••←•→←••←
•↓→•←↑→→•••↑←→→→←→↑→→→→•↑↑•••↓→•↑↓←↑↑•↑
•→•→•↑•←←•••↑•←•←←•←•↑←←↑←→•↓↓•→→•↓←↑↓↑
↑↑↑→↑↓↑↓•••↑↑•→•→•↑←→→↓↑↓↓↑←←↑↓←↑←←↑←•↑
→↑→→→↓↓•↓→←←•••→←↓→↓↑↑↑•→→↑→↓↑•↓↑•→→•←↓
←•↓←↓↑←•↑→→→↑↑↑↓←•→↑•↓•↑←↑↓↓←↑→→↑↓↓•↑↓→
•→←↑←→→↑←→→→•↓•→←→••↑→↓→↑→←•→↓→↓→•↑←•↓
↓↑•↑↓→→↑↑→↑↓•→•↓→→→→••←→→↓↑•↓↑↓→→←↑↑↓
""".strip()

east2: str = """
↑→↑•↑↓→→↓↓•←•←↑↑↓•→↓→↑↑←↓↑↓•↓↓••←•→←••←
↑↓→•←↑→→•••↑←→→→←→↑→→→→•↑↑•••↓→•↑↓←↑↑↓→
↓•→•↑↓→↓••←←→↑•↑←↓••↑→↑←↑←•↓↑↑•→←↑•←→→↓
↑•→←←↑↑↑↓→→→→↓↑←•↓↓↓•↑↓•→↓↑•↑•↓→→←←↑←→→
•↑←↑↑↓•↓•↑←←↑•→•→•↓↑↑↑↑←→←↑•↓←→↓→↑↓→↑↑→
↑←↑↑→•↑→••←•↑•↓•→→↑→→←•→•←••••↑•↓→→↑•←•
••↑↑↓→→↑••←→→↓↑•←↓→←→•↑↓↑•↓•↑•→••↓••→→↑
•→•↑←→→←•↓↑→•↓↑↓↓•→↓↑•••↑•↓↓↑•←←↑→•↑←→→
•↓←→•↑•←↓↑•↑↑••→••↑→←
↑↓↑←•→•→→•→•↑←↑↓→→↓↑↑
""".strip()

west2: str = """
↓•↑•↑←↓•←→↓↑↑↑↑↑↓•↑•↓→••↑↑←→↑↑↑←→•←→↑←←
↑↓→•←↑••→←←↑→••→→→↑←↑•↑↓→←••→→→→•↑→•←•→
↑↑•↑→•→↑••←←•↑→•→→•↑←↑••→•→↑↓••↑↓→←↓↓↑→
←•↑↑↓•↑↑→•↑•↓→→↓↑↓←↓↑←→→↓↑↓→↑↓•↓↑↑••••↓
↑←↓↑↑•→→↓•→←→→←→•↑•→↑→→↓↑←→→••↑•↓↑↑↑→→↓
→•↓←•↑→↓••←↑→→→→↑↓↑↓→→→•→↓•→←→↑←•→↑↑←←•
↑→→→•↑••••↑→↑←↓↑•↑→↓↓↓↑→•↑•→→←→•↓→→↑
•↑↑•↑•↑•↑↓→↑→↓↑↑•↓•↓→•↓•→←↑↓→•↓→→•↓•
""".strip()

east3: str = """
→→↑•↑←↓•←•••↑••↓•→→→•→↓↑→→→→↓→↑←←↑←←→↑↑
↓↓→•←↑••→→→→←↓↑↓←↑••↓→←→••••↑•→→••←→←↓↑
↓↑↓→→↓↓↑→↑→•↑↓←••←↑←↑↓•→↓↑•••↑→↓↑•←↓↑↓•
•→••→•↑←•••→•→↑→↑→↓↑↑↑••••↓↑↑→→→•↑↑••↓→
↑←•→↑←→→→•→↓•←→••↑→↑←→←↑→↑↑→→↓↑•←•↑••↓←
••↓•→↑•↓↑↓••→↑→→↑•↓↑••••↓↑→↓↓→••↓→←•←→→
••↑→←•→←↑•→•→↓→•←↓•←↓•↓↑→→←↑↓↑↓↑→↓•↑↑←→
→↓→↓↑↑↑↓•→↑↑•→↑•→•→→→↓←↑←↑→↑↑↓→←•↓→↑→↓•
••↑•↓•↑→←→→↑→→←•↓↓••↓→↑↑•→←→↑↓↑↓↓→↓↑••↑
←↑•→↑•↑•↓↓••←↓→•↓↑←↑→↑↑↑←→→↓↓•←•↓←•••←↑
•←↑→←•↑→↓•←
•←→↓•↑•↑•←
""".strip()

west3: str = """
↑↑↑•↑←↓•←•←←•→↓↑•↑•↓↓→↓→↑→•↑↑↓→←••↓→•→↓
←↓→•←↑••→↓←→↑→•↓•↑←←↑→↑→→→→←•↑←→•→↑↑↑↓•
•↓↓•↓↑↑↓←→→←↑←←↑↑↑↓•↓••↓↑←→→↓←•←→↑↓↑↑↑→
←↓↑←↑↓→••→↑•↑←↑→•→↑↑→←↓↑→↓•→•↓↑↑↑←↓••→↑
↑•↓↑↓↓→↑←→••→↓••↑↑↑←↓•↓←↑←↓•↓↓↑↑•↑→→↑→•
↑•↑↑↓→→↑↑↑→•←←→↓↑•↑↓↑↓→↑→↓↑•→•↓↑↑•→→→••
↑→•↑→•↑→↓↑↓••↑↑•→←•↑←↑↓↓•→↑•→↓••→→→••←←
→↑•↓↑→→→•••↑←←•↑→→••↓→↓→↑←→↑←↑↓↓→↑↓↑→→•
↑→•→→←•→→→↓←→•↓•↓↓↑→•→←←•←•→••
••→↑→↑↑••↑←↑↑•→→←→↑•↓←•→←↑↑←←→
""".strip()

east4: str = """
↑•↑•↑←↓•←•••↑••••••↑•→↑↓→↓↓↑→•↑←→↑↓↓••↓
→↓→•←↑••→→→→←↓↑→↑→←↓•←↓•↓••↑↑•→•↓←→↑↑↓•
↑•↑••←→→↓→↑••↓←↓••↑←←→↑←→→←•→→→••↓•••→→
↓•↓←↑↑•→→↓↑↓→•→←•↓↓•→•↓•→→→←←↑↑←→•↑•↑←↑
↑←↓→↓←↓••↑→•→←→→↓•↑↑•↓•↑↓•→••↑•←••↓•↑↓•
•↑→↓↓→←•↑↓←↑↓←↑↓•→←←↑↓•↑←↑→←↑→→→→↓•↓↓→→
→↑→→→→↑←↓↑↓•↓•→•↑↓↑•→↑↑↓↑•→→↓•••↓↑•↓→↓→
←↓→↓↓↑←↑↑•↓→←•↓→••↑→→↑•↓↑↑→←↓↑←←•↑→•→↓↑
↑→→•→←→↓•↑•↑↓↑↑→↓→→↑↓•↓
↓←→↑→↑•→→•↑••↓→↓•↓←•↓←
""".strip()

west4: str = """
↓•↑•↑←↓•←•••↑••••••↑•→↑↓→↓↓↑→•↑←••←•••→
→↓→•←↑••→→→→←↓↑→↑→←↓•←↓•↓••↑↑•→→→↑↑↓↑←→
→↑↑↓↑•→↑←••↑•↓→↑→→→←↑↑→←↓••↑••↑↓↑→→↓↓↑↓
•↓•→→↑→↓•↑↓→↓•↑←↓•←↑↓←→•↓•••↓→↓↓→←→↑↑←•
•←•→↑•→←•↑•↓→•→→↑•→←↓•→↑•↑→↑•↓•↑→•↓↓→↓→
←•→→↑↑↑•↓↑↓→←↑→↑•→↑←→←←•↓↑↑↑→→•→↑←↓↑↑←↑
→•←→↓↓→←↑→•↓↓•→•→↓↓•↑•←↑→•←→←↑•↑→→↓→↑•↑
↓↑↑↑←•↓↑↑←→↑→↓→↑→→←↑•→←•↑↓→←←••↓•→→↑←←•
→→←↓↑←↑↑←•←→↑→↑↑↑←↑←•↑↓•
•→•→↓↑••••↓↑•••↑•→↑←••↑↑
""".strip()

east5: str = """
↑↑↑•↑←↓•←•••↑••••••↑•→↑↓→↓↓↑→•↑←↓•←←↑↓↓
↓↓→•←↑••→→→→←↓↑→↑→←↓•←↓•↓••↑↑•→↑↑↑↑→←↓•
↑•↑→↑←→→↓↓•→•→←•↑←↑←←→↑→→→→→↓•→↑→→↑↓→↓↓
↓•↓←↑↑•→→←•↑→•→•←↑↓•→••→→←→←→•→←•↓←↑→•→
•↑←↑↑•↑↑←↑•↓↑↑↑•↑•→←•↑↑•→•←•↑••↑↓↑••↑↓•
→↑↑→↑↑↑↓•↑↑•←←↑→↑↑↑↑→←•↓←↑•↑→→•←••←↑→↑↓
↑•→•←↑•←↑→→↑↑↓←↑↓•↑↓↓•↑↓→←↓•↑↑•←→•↑•→→↑
•→•→•↓••→→←••↑•↑→•←←→↓↑↑•←→↑↑↑↑←→•↓↑↑•→
↑↓↑→→←→→•→→→•←↑
→↓→←←→↑•↑↓↓↑←↓↑
""".strip()

codes: list = [east1, west1, east2, west2, east3, west3, east4, west4, east5]


class Orientation:
    def __init__(self, order: list = ["lrb", "rlt"]):
        self.l1: list = [0, 0, -2]
        self.r1: list = [0, 1, -1]
        self.b1: list = [1, 0, -1]

        self.r2: list = [1, 2, -1]
        self.l2: list = [1, 1, -2]
        self.t2: list = [0, 2, -1]

        self.order: list = order

        self.set_order(order)

    def set_order(self, order: list = ["lrb", "rlt"]):
        a1: str = order[0][0]
        a2: str = order[0][1]
        a3: str = order[0][2]

        a4: str = order[1][0]
        a5: str = order[1][1]
        a6: str = order[1][2]

        self.list_order = [
            getattr(self, f"{a1}1"), getattr(self, f"{a2}1"), getattr(self, f"{a3}1"),
            getattr(self, f"{a4}2"), getattr(self, f"{a5}2"), getattr(self, f"{a6}2")
        ]

        return self.list_order

    def get_list(self):
        return self.list_order


def to_numbers(data: str, order: str = "01234") -> str:
    return data.replace("•", order[0]).replace("↑", order[1])\
    .replace("→", order[2]).replace("↓", order[3]).replace("←", order[4])


def to_symbols(data: str, order: str = "•↑→↓←") -> str:
    return data.replace("0", order[0]).replace("1", order[1])\
    .replace("2", order[2]).replace("3", order[3]).replace("4", order[4])


def to_list(data: str) -> list:
    data_list: list = data.split("\n")

    for i in range(len(data_list)):
        data_list[i]: list = [int(nb) for nb in data_list[i]]

    return data_list


def encode_data_trinome(data: list, base: int = 5, mode: str = ["lrb", "rlt"]) -> list:
    encoded: list = []

    d: Orientation = Orientation(mode)
    d: list = d.get_list()

    for i in range(0, len(data), 2):
        for n in range(0, len(data[i])-2, 3):
            d1: int = data[i+d[0][0]][n+d[0][1]]
            d2: int = data[i+d[1][0]][n+d[1][1]]
            d3: int = data[i+d[2][0]][n+d[2][1]]

            encoded.append([d1, d2, d3])

            d4: int = data[i+d[3][0]][n+d[3][1]]
            d5: int = data[i+d[4][0]][n+d[4][1]]
            d6: int = data[i+d[5][0]][n+d[5][1]]

            encoded.append([d4, d5, d6])

        if len(data[i]) % 3:
            d1: int = data[i+d[0][0]][d[0][2]]
            d2: int = data[i+d[1][0]][d[1][2]]
            d3: int = data[i+d[2][0]][d[2][2]]

            encoded.append([d1, d2, d3])

    for i in range(len(encoded)):
        encoded[i]: int = int(f"{encoded[i][0]}{encoded[i][1]}{encoded[i][2]}", base)

    return encoded


def format_data(data: str, offset: int = 32) -> str:
    if offset != "no":
        data: list = [chr(o+offset) for o in data]

    text: str = ""

    for e in data:
        text += str(e)

        if offset == "no":
            text += " "

    return text
